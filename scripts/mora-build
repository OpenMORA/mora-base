#!/usr/bin/env python

# Builds the MORA module at CWD, or at $1. This implies:
# - Creating $DIR/build
# - Running cmake 
# - Running make or msbuild
#
# Part of OpenMora - https://github.com/OpenMORA

import os
import sys
import re
import string
import platform
from subprocess import call
import glob
import morautils
import argparse
import pprint
import shutil

#------   MAIN   -------
def main():
	# Parse args:
	parser = argparse.ArgumentParser(description='Builds one or more MORA modules.')
	parser.add_argument(
		'package', metavar='PKGDIR', type=str, nargs='*',
		help='names of packages to build')
	parser.add_argument(
		'--rebuild', dest='rebuild', action='store_true',
		help='forces a rebuild')
	parser.add_argument(
		'--all', dest='all', action='store_true',
		help='builds all packages in the repository')

	args = parser.parse_args()

	# Determine which pkgs to build ------------
	lstToBuild = []

	if (args.all):
		# Locate the mora-base pkg, which contains the distro file:
		pkgs_root = morautils.get_pkgs_root()
		print("Using MORA root dir: " + pkgs_root)

		# Get distro info:
		distro = morautils.read_distro_file()
		for pkg in distro:
			sPkgDir = os.path.normpath( pkgs_root+"/"+pkg )
			lstToBuild.append(sPkgDir)
	else:
		# No arguments: Build current dir:
		if (not args.package):
			lstToBuild.append(os.path.abspath(os.getcwd()))
		else:
			# List of directories:
			for p in args.package:
				# Support expanding wildcard expressions (for Windows):
				p_glob = glob.glob(p)
				for fil in p_glob:
					lstToBuild.append(os.path.abspath(fil))
				if not p_glob:
					lstToBuild.append(os.path.abspath(p))

	# Locate the mora-base pkg, which contains the core libs:
	morabase_dir = morautils.get_morabase_dir()
	morabase_build_dir = os.path.normpath(morabase_dir + "/build")

	# Loop for each pkg to be built:
	for p in lstToBuild:
		pkg_dir = os.path.normpath(p)
		pkg_name = os.path.basename(pkg_dir) 
		print("[Building] %s @ %s" % (pkg_name, pkg_dir) )
		assert os.path.exists(pkg_dir)  # Make sure the dir exists
		if not os.path.exists(os.path.normpath(pkg_dir+'/CMakeLists.txt')):
			print("[SKIP] Directory '%s' doesn't contain a CMakeLists.txt file! Is it a MORA pkg?" % pkg_dir)
			continue
		# Build dir for CMake:
		build_dir = os.path.normpath( pkg_dir + "/build" )

		if args.rebuild:
			print("  * FORCE REBUILD: Removing previous contents in %s" % build_dir )
			if  os.path.exists(build_dir):
				shutil.rmtree(build_dir)

		if not os.path.exists(build_dir):
			print("  * Mkdir: %s" % build_dir )
			os.mkdir(build_dir)
		else:
			print("  * Existed: %s" % build_dir )
			
		# chdir & run cmake:
		os.chdir(build_dir)
		cmake_args = ["cmake", pkg_dir]
		if ('MORA_CMAKE_GENERATOR' in os.environ):
			sMoraGenerator = os.environ['MORA_CMAKE_GENERATOR']
			cmake_args.append("-G")
			cmake_args.append(sMoraGenerator)
		
		# Help CMake to locate MORA:
		cmake_args.append("-DMORA_DIR=" + morabase_build_dir)

		print("  * Invoking cmake: %s" % ' '.join(map(str, cmake_args)))
		call(cmake_args)
		
		# Compile:
		print("  * Compiling:")
		# Call nmake, msbuild or whatever via CMake:
		make_args=["cmake","--build",build_dir,"--config","Release"];
		call(make_args)


if __name__ == "__main__":
	sys.exit(main())


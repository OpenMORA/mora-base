# +==========================================================================+
#  Open MObile Robot Architecture (MORA)
#  https://github.com/OpenMORA
#
#  **File generated automatically by CMake**
#
#  Usage from an external project: in your CMakeLists.txt, add:
#
#    FIND_PACKAGE(MORA REQUIRED)
#    TARGET_LINK_LIBRARIES(MY_TARGET_NAME ${MORA_LIBS})
#
#    This file will define the following variables:
#      - MORA_LIBS                       : The list of libraries to links against.
# +==========================================================================+

# -------------- Use MOOS -----------------------
FIND_PACKAGE(MOOS REQUIRED)
# Now we have MOOS_LIBRARIES defined.

IF(WIN32)
	SET(MOOS_LIBRARIES ${MOOS_LIBRARIES} wsock32)
ENDIF()

IF(WIN32)
    ADD_DEFINITIONS(-DWINDOWS_NT -D_CRT_SECURE_NO_DEPRECATE -D_SCL_SECURE_NO_DEPRECATE)
ENDIF(WIN32)
IF(UNIX)
    ADD_DEFINITIONS(-DUNIX)
	IF("${CMAKE_SYSTEM_NAME}" MATCHES "Darwin")
		ADD_DEFINITIONS( -DPLATFORM_DARWIN )
		SET( PLATFORM_DARWIN 1 )
	ENDIF("${CMAKE_SYSTEM_NAME}" MATCHES "Darwin")
	IF("${CMAKE_SYSTEM_NAME}" MATCHES "Linux")
		ADD_DEFINITIONS( -DPLATFORM_LINUX )
		SET( PLATFORM_LINUX 1 )
	ENDIF("${CMAKE_SYSTEM_NAME}" MATCHES "Linux")
ENDIF(UNIX)
# --------- End of MOOS import ------------------

IF(CMAKE_COMPILER_IS_GNUCXX)
	# We need pthread's
	IF (UNIX)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
	ENDIF(UNIX)

	IF(NOT CMAKE_BUILD_TYPE STREQUAL "Debug")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 ")
	ENDIF()

	# Define: _DEBUG
	IF(CMAKE_BUILD_TYPE MATCHES "Debug")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
		ADD_DEFINITIONS( -D_DEBUG)
		ADD_DEFINITIONS( -DDEBUG)
	ENDIF(CMAKE_BUILD_TYPE MATCHES "Debug")
ENDIF(CMAKE_COMPILER_IS_GNUCXX)


# --------------------- A macro to declare a MORA module -------------------
# If "_dir_" is not provided, it'll default to current_dir/_name
macro(DEFINE_MORA_PROGRAM _name_)
	SET(_dir_ ${ARGN})
	IF("${_dir_}" STREQUAL "")
		SET(_dir_ "${${PROJECT_NAME}_SOURCE_DIR}/${_name_}")
	ENDIF()
	# Put these 2 commands here, not at the root CMake file to limit their effects:
	INCLUDE_DIRECTORIES( ${MOOS_INCLUDE_DIRS}  )
	LINK_DIRECTORIES( ${MOOS_LIBRARY_DIRS} )

	# By default, all modules are build, except those with
	#  a BUILD_MODULE_*_DEFAULT variable defined.
	set(aux_var_name_ "BUILD_MODULE_${_name_}_DEFAULT")
	IF (DEFINED ${aux_var_name_})
		set(_PROG_DEF "${${aux_var_name_}}")
	else()
		set(_PROG_DEF ON)
	endif()
	SET(BUILD_MODULE_${_name_} ${_PROG_DEF} CACHE BOOL "Build module ${_name_}")
	IF(BUILD_MODULE_${_name_})
	   INCLUDE_DIRECTORIES(${_dir_}) # This is required by the macros in main.cpp to locate the app's .h files
	   add_subdirectory(${_dir_})
		if(TARGET ${_name_})
			if(ENABLE_SOLUTION_FOLDERS)
				set_target_properties(${_name_} PROPERTIES FOLDER "MORA modules")
			else()
				SET_TARGET_PROPERTIES(${_name_} PROPERTIES PROJECT_LABEL "(MORA-MODULE) ${_name_}")
			endif()
		endif()	   
	ENDIF()
endmacro()

# -------- Macro to set common CMake options to MORA pkgs ----------
macro(MORA_COMMON_CMAKE)
	#dump libs and executables in the same place
	IF (NOT "$ENV{MORA_EXECUTABLE_OUTPUT}" STREQUAL "")
		SET(OUT_BINS "$ENV{MORA_EXECUTABLE_OUTPUT}")
	ELSE()
		SET(OUT_BINS "${${PROJECT_NAME}_BINARY_DIR}/bin")
	ENDIF()
	SET( LIBRARY_OUTPUT_PATH "${OUT_BINS}" CACHE PATH    "Output directory for libraries" )
	SET( EXECUTABLE_OUTPUT_PATH "${OUT_BINS}" CACHE PATH "Output directory for executables" )
	SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY "${OUT_BINS}" CACHE PATH "Output directory for executables" )
	
	# Solution folders:
	SET(ENABLE_SOLUTION_FOLDERS ON CACHE BOOL "Group projects under virtual folders of the compiler IDE (e.g. VisualStudio)")
	if (ENABLE_SOLUTION_FOLDERS)
	  set_property(GLOBAL PROPERTY USE_FOLDERS ON)
	  set_property(GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER "CMakeTargets")
	endif()	
endmacro()


# -------- Final vars ----------
set(MORA_LIBS ${MOOS_LIBRARIES})
INCLUDE_DIRECTORIES(@MORA_INCLUDE_DIRS@)

set(MORA_FOUND TRUE CACHE BOOL "" FORCE)


